{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<script type=\"text/javascript\" src="https://gammapy.readthedocs.io/en/latest/_sources/notebooks/\&quot;../_static/linksdl.js\&quot;"></script>\n",
    "<div class='alert alert-info'>\n",
    "**This is a fixed-text formatted version of a Jupyter notebook.**\n",
    "\n",
    "Try online on Binder\n",
    "\n",
    "[![Binder](https://mybinder.org/badge.svg)](https://beta.mybinder.org/v2/gh/gammapy/gammapy-extra/master?filepath=light_curve.ipynb)\n",
    "\n",
    "Alternatively you can download for each version of Gammapy a\n",
    "[HTMLZip pack](http://readthedocs.org/projects/gammapy/downloads/) containing\n",
    "the whole HTML documentation and full collection of notebooks, so you can execute\n",
    "them in your local `_static/notebooks/` folder. You can also contribute with your\n",
    "own notebooks in this [GitHub repository](https://github.com/gammapy/gammapy-extra/tree/master/notebooks).\n",
    "\n",
    "**Source files:**\n",
    "[light_curve.ipynb](../_static/notebooks/light_curve.ipynb) |\n",
    "[light_curve.py](../_static/notebooks/light_curve.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example of light curve\n",
    "\n",
    "## Introduction\n",
    "\n",
    "This tutorial explain how light curves can be computed with Gammapy.\n",
    "\n",
    "Currently this notebook is using simulated data from the Crab Nebula. We will replace it with a more interesting dataset of a variable source soon.\n",
    "\n",
    "The main classes we will use are:\n",
    "\n",
    "* [gammapy.time.LightCurve](../api/gammapy.time.LightCurve.rst)\n",
    "* [gammapy.time.LightCurveEstimator](../api/gammapy.time.LightCurveEstimator.rst)\n",
    "\n",
    "## Setup\n",
    "\n",
    "As usual, we'll start with some setup..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import astropy.units as u\n",
    "from astropy.units import Quantity\n",
    "from astropy.coordinates import SkyCoord, Angle\n",
    "\n",
    "from regions import CircleSkyRegion\n",
    "\n",
    "from gammapy.utils.energy import EnergyBounds\n",
    "from gammapy.data import Target, DataStore\n",
    "from gammapy.spectrum import SpectrumExtraction\n",
    "from gammapy.spectrum.models import PowerLaw\n",
    "from gammapy.background import ReflectedRegionsBackgroundEstimator\n",
    "from gammapy.image import SkyImage\n",
    "from gammapy.time import LightCurve, LightCurveEstimator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extract spectral data\n",
    "First, we will extract the spectral data needed to build the light curve."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prepare the data\n",
    "data_store = DataStore.from_dir('$GAMMAPY_EXTRA/datasets/hess-crab4-hd-hap-prod2/')\n",
    "obs_ids = [23523, 23526]\n",
    "obs_list = data_store.obs_list(obs_ids)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Target definition\n",
    "target_position = SkyCoord(ra=83.63308, dec=22.01450, unit='deg')\n",
    "on_region_radius = Angle('0.2 deg')\n",
    "on_region = CircleSkyRegion(center=target_position, radius=on_region_radius)\n",
    "target = Target(on_region=on_region, name='Crab', tag='ana_crab')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exclusion regions\n",
    "exclusion_file = '$GAMMAPY_EXTRA/datasets/exclusion_masks/tevcat_exclusion.fits'\n",
    "allsky_mask = SkyImage.read(exclusion_file)\n",
    "exclusion_mask = allsky_mask.cutout(\n",
    "    position=target.on_region.center,\n",
    "    size=Angle('6 deg'),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Estimation of the background\n",
    "bkg_estimator = ReflectedRegionsBackgroundEstimator(\n",
    "    on_region=on_region,\n",
    "    obs_list=obs_list,\n",
    "    exclusion_mask=exclusion_mask,\n",
    ")\n",
    "bkg_estimator.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: AstropyDeprecationWarning: The truth value of a Quantity is ambiguous. In the future this will raise a ValueError. [astropy.units.quantity]\n",
      "/Users/deil/Library/Python/3.6/lib/python/site-packages/astropy/units/quantity.py:635: RuntimeWarning: invalid value encountered in true_divide\n",
      "  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "# Extract the spectral data\n",
    "e_reco = EnergyBounds.equal_log_spacing(0.7, 100, 50, unit='TeV')  # fine binning\n",
    "e_true = EnergyBounds.equal_log_spacing(0.05, 100, 200, unit='TeV')\n",
    "extraction = SpectrumExtraction(\n",
    "    obs_list=obs_list,\n",
    "    bkg_estimate=bkg_estimator.result,\n",
    "    containment_correction=False,\n",
    "    e_reco=e_reco,\n",
    "    e_true=e_true,\n",
    ")\n",
    "extraction.run()\n",
    "extraction.compute_energy_threshold(\n",
    "    method_lo='area_max',\n",
    "    area_percent_lo=10.0,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Light curve estimation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the time intervals. Here, we only select intervals corresponding to an observation\n",
    "intervals = []\n",
    "for obs in extraction.obs_list:\n",
    "    intervals.append([obs.events.time[0], obs.events.time[-1]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model to compute the expected counts (generally, parameters come from the fit)\n",
    "model = PowerLaw(\n",
    "    index=2. * u.Unit(''),\n",
    "    amplitude=2.e-11 * u.Unit('1 / (cm2 s TeV)'),\n",
    "    reference=1 * u.TeV,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Estimation of the light curve\n",
    "lc_estimator = LightCurveEstimator(extraction)\n",
    "lc = lc_estimator.light_curve(\n",
    "    time_intervals=intervals,\n",
    "    spectral_model=model,\n",
    "    energy_range=[0.7, 100] * u.TeV,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Results\n",
    "\n",
    "The light curve measurement result is stored in a table. Let's have a look at the results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['TIME_MIN', 'TIME_MAX', 'FLUX', 'FLUX_ERR', 'LIVETIME', 'N_ON', 'N_OFF', 'ALPHA', 'MEASURED_EXCESS', 'EXPECTED_EXCESS']\n"
     ]
    }
   ],
   "source": [
    "print(lc.colnames)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>LightCurve length=2</i>\n",
       "<table id=\"table4671134968\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>TIME_MIN</th><th>TIME_MAX</th><th>FLUX</th><th>FLUX_ERR</th><th>MEASURED_EXCESS</th><th>EXPECTED_EXCESS</th></tr></thead>\n",
       "<thead><tr><th></th><th></th><th>1 / (cm2 s)</th><th>1 / (cm2 s)</th><th></th><th></th></tr></thead>\n",
       "<thead><tr><th>object</th><th>object</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>53343.92100685648</td><td>53343.94050190008</td><td>2.5149099688129456e-11</td><td>2.470523510499482e-12</td><td>142.833333333</td><td>161.134424872</td></tr>\n",
       "<tr><td>53343.95300319192</td><td>53343.972404738815</td><td>2.59454633055679e-11</td><td>2.5710797800330566e-12</td><td>136.666666667</td><td>149.445339471</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<LightCurve length=2>\n",
       "     TIME_MIN          TIME_MAX      ... MEASURED_EXCESS EXPECTED_EXCESS\n",
       "                                     ...                                \n",
       "      object            object       ...     float64         float64    \n",
       "----------------- ------------------ ... --------------- ---------------\n",
       "53343.92100685648  53343.94050190008 ...   142.833333333   161.134424872\n",
       "53343.95300319192 53343.972404738815 ...   136.666666667   149.445339471"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lc['TIME_MIN', 'TIME_MAX', 'FLUX', 'FLUX_ERR', 'MEASURED_EXCESS', 'EXPECTED_EXCESS']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1166bd710>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\noJAkdTIoJEmdDApJUieDQpLUyaCQJHXKnnBPoCTbgH/os/kS4PYRljNK1j5+C7VusPb5sNDqfnxV\nLd1doz0iKAaRZG1VrZrvOh4Max+/hVo3WPt8WKh17467niRJnQwKSVKnvTEozpvvAubA2sdvodYN\n1j4fFmrdnfa6YxSSpMHsjT0KSdIADApJUqcFHxRJjkvyzSQ3JnnbDMsfmuRj7fKrkyxv5z8ryYb2\n59okJ/a7zgmu+7tJNrbL1o6i7rnU3rP80CR3JXlLv+uc8NpH/rrP4f2yPMmOnvfMuT3PeUZb941J\n/jRJFlDtV7brnFr2k5NUe7vs6UmuSrKpfZ33b+eP5XUfqqpasD/AvsC3gScADwGuBZ42rc3rgXPb\n6ZcDH2unHwbs104/BriN5tawu13nJNbdPv4usGRSX/Oe5auBjwNv6Xedk1r7OF73Ob5flgPXz7Le\nrwHPBgJcBvzSAqr9SmDVpL7XaT5LrgOOah//BLDvuF73Yf8s9B7Fs4Abq+o7VXUP8FHgJdPavAT4\nUDt9CfCCJKmqf6qq+9r5+wNTR/X7Weck1j0uD7p2gCQnAN8BNg24zkmtfRzmVPdMkjwGeERVXVXN\np9eHgROGX/rwax+judT+i8B1VXUtQFV9r6p2jvF1H6qFHhTLgP/b8/iWdt6MbdoP2B/QpDtJjk6y\nCdgIvK5d3s86J7FuaELj80nWJTl5yDXPufYkDwfeCvzRg1jnMIyidhj96z6n9wtwWJJrknwhyXN7\n2t+ym3UOwyhqn/IX7W6nPxxRsMyl9icDleRzSdYn+b2e9uN43Ydqv/kuYI5menNM/4Y9a5uquho4\nIslTgQ8luazPdc7V0Ouuqh8Cx1TVre3+2suTfKOqvjjUyudW+x8B762qu6b9XY/jNe93O4PWDqN/\n3edS91bg0Kr6XpJnAJcmOaLPdQ7D0Guvqu3Aq6pqS5IDaXYHnkTz7XyY5lL7fsBzgGcC/wT8TZJ1\nwPY+1jlxFnqP4hbgkJ7HjwNuna1Nkv2Ag4Dv9zaoqs3A3cCRfa5zrkZRN1V1a/vvbcBf0XSdh20u\ntR8NvCfJd4FTgTOTvLHPdU5q7eN43R903VX1o6r6XlvfOpp97k9u2z9uN+uc1Nqpqi3tv3cC/5vJ\ne6/fAnyhqm6vqn8CPgP8LON73Ydrvg+SzOWHJrW/AxzGAwebjpjW5g3serDp4nb6MB44CPx4mv+s\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11665c1d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lc.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Exercises\n",
    "\n",
    "* Change the assumed spectral model shape (e.g. to a steeper power-law), and see how the integral flux estimate for the lightcurve changes.\n",
    "* Try a time binning where you split the observation time for every run into two time bins."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
